{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"GitHub Repository Archive Script","text":""},{"location":"#overview","title":"Overview","text":"<p>The Repository Archive Script is a Python script designed to automatically archive GitHub repositories that haven't been updated for a specified period of time. Archiving older repositories helps keep ONSdigital's GitHub organisation clean and organised, making it easier for users to find active projects, and reducing the organisation's footprint and maintenance overhead.</p>"},{"location":"#frequently-asked-questions-faqs","title":"Frequently Asked Questions (FAQs)","text":"<p>If you have any questions about the Repository Archive Script and its functionality, please refer to the FAQs section for more information.</p> <p>If this does not answer your question, please feel free to open an issue in the GitHub repository with the question label or contact an organisation owner.</p>"},{"location":"#technical-documentation","title":"Technical Documentation","text":"<p>For information about the technical aspects of the Repository Archive Script, including its design, configuration, and logging, please refer to the Technical Documentation.</p>"},{"location":"documentation/","title":"Documentation","text":"<p>This site uses MkDocs to build its documentation and GitHub Pages for hosting.</p>"},{"location":"documentation/#format","title":"Format","text":"<p>Documentation within this project follows the following pattern:</p> <ul> <li>A <code>README.md</code> for each component</li> <li>A <code>/docs</code> folder for the project</li> </ul> <p>Each <code>README.md</code> should contain:</p> <ul> <li>A description of what the component is/does</li> <li>A list of any prerequisites</li> <li>Setup instructions</li> <li>Execution instructions</li> <li>Deployment instructions</li> </ul> <p>The <code>/docs</code> folder should contain:</p> <ul> <li>A description of what the project is</li> <li>An overview of how the everything fits together in the project</li> <li>An explanation of the tech stack</li> <li>Details of the underlying dataset</li> </ul> <p>A majority of the information should reside within the <code>/docs</code> directory over the <code>README</code>. The <code>README</code>s in this project should be kept for concise instructions on how to use each component. Any detailed explanation should be kept within <code>/docs</code>.</p>"},{"location":"documentation/#getting-mkdocs-setup","title":"Getting MkDocs Setup","text":"<p>In order to build an MkDocs deployment or serve the documentation locally, we need to install MkDocs and its dependencies.</p> <ol> <li> <p>Navigate into the project's root directory.</p> </li> <li> <p>Install MkDocs and its dependencies.</p> <pre><code>make install-docs\n</code></pre> </li> <li> <p>You can now use MkDocs. To see a list of commands run the following:</p> <pre><code>mkdocs --help\n</code></pre> </li> </ol>"},{"location":"documentation/#updating-mkdocs-deployment","title":"Updating MkDocs Deployment","text":""},{"location":"documentation/#github-action-to-deploy-documentation","title":"GitHub Action to Deploy Documentation","text":"<p>A GitHub Action is set up to automatically deploy the documentation to GitHub Pages whenever a commit is made to the <code>main</code> branch. This action is triggered by a push event to the <code>main</code> branch and runs the <code>mkdocs gh-deploy</code> command to build and deploy the documentation.</p>"},{"location":"documentation/#manual-deployment","title":"Manual Deployment","text":"<p>If changes are made within <code>/docs</code>, the GitHub Pages deployment will need to be updated. Assuming you have already installed MkDocs and Material for MkDocs, do the following:</p> <ol> <li> <p>Navigate to the projects root directory.</p> </li> <li> <p>Deploy the documentation to GitHub Pages.</p> <pre><code>mkdocs gh-deploy\n</code></pre> </li> <li> <p>This will build the documentation and deploy it to the <code>gh-pages</code> branch of your repository. The documentation will be available at <code>https://ONS-Innovation.github.io/&lt;repository-name&gt;/</code>.</p> </li> </ol> <p>Please Note: The <code>gh-deploy</code> command will overwrite the <code>gh-pages</code> branch and make the local changes available on GitHub Pages. Make sure that these changes are appropriate and have been reviewed before deployment.</p>"},{"location":"faq/","title":"Frequently Asked Questions (FAQs)","text":""},{"location":"faq/#how-does-the-archive-process-work","title":"How does the Archive Process Work?","text":"<ul> <li>Each week, the archive tool will process each non-archived repository within ONSdigital.</li> <li>For each repository, it will:</li> <li>Check if the repository hasn't been updated within the last year.</li> <li>If it hasn't been updated, it will create an issue in the repository to notify the maintainers. The issue will include details about how to avoid the repository being archived and how to archive the repository manually.</li> <li>If an issue already exists for the repository, it will check how long ago the issue was created.</li> <li>If the issue was created more than 30 days ago, the tool will archive the repository.</li> </ul> <p>In depth information on this process is available within the Technical Documentation.</p>"},{"location":"faq/#how-can-i-prevent-my-repository-from-being-archived","title":"How Can I Prevent My Repository from Being Archived?","text":"<p>To prevent your repository from being archived, you should push an update to the repository at least once a year. We recommend that an <code>ArchiveExemption.txt</code> or <code>ArchiveExemption.md</code> file is added to the root of the repository to indicate that it should not be archived. This file should contain a brief explanation of why the repository is still relevant and should not be archived.</p> <p>This file will need to be updated annually to ensure that the repository remains exempt from archiving. If you do not update this file, the repository will be archived after a year of inactivity.</p>"},{"location":"faq/#what-happens-if-my-repository-is-archived","title":"What Happens if My Repository is Archived?","text":"<p>When a repository is archived, it becomes read-only. This means that no further changes can be made to the repository, including issues or pull requests. The repository can still be viewed for reference, including any open issues or pull requests that were present at the time of archiving. If you need to make changes to an archived repository, you will need to unarchive it first.</p>"},{"location":"faq/#how-do-i-unarchive-a-repository","title":"How Do I Unarchive a Repository?","text":"<p>In order to unarchive a repository, you need to have administrative access to the repository either being an organisation or repository owner. You can unarchive a repository by going to the repository settings and selecting the \"Unarchive\" option.</p> <p>To avoid the repository from being archived again, ensure that you push an update to the repository. This will make it exempt from archiving for another year. You may also want to add an <code>ArchiveExemption.txt</code> or <code>ArchiveExemption.md</code> file to the root of the repository to indicate that it should not be archived in the future.</p> <p>It is important to note that if a repository is without an owner or has no active admin users, an organisation admin will need to unarchive the repository.</p> <p>All repositories within ONSdigital should be maintained to have an up-to-date <code>CODEOWNERS</code> file and repository admins to ensure that access is available for unarchiving when necessary. This is specified within ONS' GitHub Usage Policy and must be adhered to.</p>"},{"location":"faq/#can-i-archive-my-own-repository","title":"Can I Archive My Own Repository?","text":"<p>We encourage repository owners to archive their own repositories if they are no longer actively maintained or relevant. You can do this by going to the repository settings and selecting the \"Archive\" option. We recommend that you also add a notice to the repository's README file to inform users that the repository is archived and no longer maintained, along with closing any open issues or pull requests. This helps us align with GitHub's recommended practices for archiving repositories.</p>"},{"location":"faq/#further-questions","title":"Further Questions","text":"<p>For any further questions or concerns regarding the archiving process, please create an issue in the Archive Tool repository or contact an ONSdigital Owner.</p>"},{"location":"technical_documentation/configuration/","title":"Configuration","text":"<p>The archive tool uses both a local and cloud configuration file to manage its settings. The local configuration file is located within <code>./config/config.json</code>. The cloud configuration file is stored in an S3 bucket and is used as a way to adjust the settings of the archive tool without needing to modify the local file and redeploy the application.</p>"},{"location":"technical_documentation/configuration/#configjson","title":"<code>config.json</code>","text":"<p>The <code>config.json</code> file contains the following:</p> <pre><code>{\n  \"features\": {\n    \"show_log_locally\": false,\n    \"use_local_config\": false\n  },\n  \"archive_configuration\": {\n    \"archive_threshold\": 365,\n    \"notification_period\": 30,\n    \"notification_issue_tag\": \"Archive Notice\",\n    \"exemption_filename\": [\"ArchiveExemption.txt\", \"ArchiveExemption.md\"],\n    \"maximum_notifications\": 1\n  }\n}\n</code></pre>"},{"location":"technical_documentation/configuration/#features-section","title":"<code>features</code> Section","text":"<p>This section contains feature flags that control which the tool's features are enabled or disabled.</p>"},{"location":"technical_documentation/configuration/#show_log_locally","title":"<code>show_log_locally</code>","text":"<p>If set to <code>true</code>, the tool will output logs to a <code>debug.log</code> file at the root of the project directory. This is useful for debugging purposes. If set to <code>false</code>, logs will not be saved locally.</p> <p>When deploying to AWS, this should be set to <code>false</code> to avoid files being written to the local filesystem.</p>"},{"location":"technical_documentation/configuration/#use_local_config","title":"<code>use_local_config</code>","text":"<p>If set to <code>true</code>, the tool will use the local configuration file (<code>config.json</code>) for its settings (overriding any cloud configuration). If set to <code>false</code>, the tool will fetch the configuration from the cloud (S3 bucket).</p> <p>When deploying to AWS, this must be set to <code>false</code> to ensure the tool uses the cloud configuration. Pulling the configuration from the cloud allows for dynamic updates without needing to redeploy the application.</p> <p>When debugging locally, you can set this to <code>true</code> to use the local configuration file. This is useful if you need to see the logs locally, without affecting the cloud deployment.</p>"},{"location":"technical_documentation/configuration/#archive_configuration-section","title":"<code>archive_configuration</code> Section","text":"<p>This section contains the configuration settings related to the archiving process, including thresholds and notification settings.</p>"},{"location":"technical_documentation/configuration/#archive_threshold","title":"<code>archive_threshold</code>","text":"<p>This is the number of days which a repository must be inactive before it is considered for archiving. The default value is <code>365</code> days (1 year).</p>"},{"location":"technical_documentation/configuration/#notification_period","title":"<code>notification_period</code>","text":"<p>This is the number of days that a notification issue will be open before the repository is archived. The default value is <code>30</code> days.</p>"},{"location":"technical_documentation/configuration/#notification_issue_tag","title":"<code>notification_issue_tag</code>","text":"<p>This is the tag that will be applied to the notification issue created for a repository that is eligible for archiving. The default value is <code>\"Archive Notice\"</code>.</p> <p>This should not be changed as the label has been used across the GitHub organisation already. The label allows us to programatically identify repositories that the tool has been run against.</p>"},{"location":"technical_documentation/configuration/#exemption_filename","title":"<code>exemption_filename</code>","text":"<p>This is an array of filenames that the exemption files are recommended to be named. This list is used directly when generating the body of the notification issue. The default values are <code>[\"ArchiveExemption.txt\", \"ArchiveExemption.md\"]</code>.</p> <p>The exemption file itself is not currently used by the tool, but may be used in the future. This is further explained in the Exemption File documentation.</p>"},{"location":"technical_documentation/configuration/#maximum_notifications","title":"<code>maximum_notifications</code>","text":"<p>This is the maximum number of notifications that can be created by the tool in a single run. When running the tool locally, this should be set to either <code>1</code> or <code>0</code> to avoid creating too many notifications during testing.</p> <p>When deploying to AWS, this should be set to a higher value, currently <code>200</code>, to allow the tool to process a good volume of repositories in a single run.</p>"},{"location":"technical_documentation/configuration/#example-during-local-testing","title":"Example During Local Testing","text":"<p>When testing locally, you might set the <code>config.json</code> file as follows:</p> <pre><code>{\n  \"features\": {\n    \"show_log_locally\": true,\n    \"use_local_config\": true\n  },\n  \"archive_configuration\": {\n    \"archive_threshold\": 365,\n    \"notification_period\": 30,\n    \"notification_issue_tag\": \"Archive Notice\",\n    \"exemption_filename\": [\"ArchiveExemption.txt\", \"ArchiveExemption.md\"],\n    \"maximum_notifications\": 0\n  }\n}\n</code></pre> <p>This will ensure that the local configuration is used, logs are saved to <code>debug.log</code>, and no notifications are created during testing.</p>"},{"location":"technical_documentation/configuration/#example-on-aws","title":"Example On AWS","text":"<p>When deploying to AWS, the <code>config.json</code> file should be set as follows:</p> <pre><code>{\n  \"features\": {\n    \"show_log_locally\": false,\n    \"use_local_config\": false\n  },\n  \"archive_configuration\": {\n    \"archive_threshold\": 365,\n    \"notification_period\": 30,\n    \"notification_issue_tag\": \"Archive Notice\",\n    \"exemption_filename\": [\"ArchiveExemption.txt\", \"ArchiveExemption.md\"],\n    \"maximum_notifications\": 200\n  }\n}\n</code></pre> <p>This configuration ensures that the tool uses the cloud configuration, does not save logs locally, and can process a larger number of repositories in a single run.</p> <p>If <code>use_local_config</code> is set to <code>false</code>, the tool will fetch the configuration from the cloud S3 bucket. This file can be tuned to the needs of the Technical Advisory Group (TAG) and will rarely need to be changed.</p> <p>It is essential that <code>use_local_config</code> is set to <code>false</code> when deploying to AWS.</p>"},{"location":"technical_documentation/exemption_process/","title":"Exemption Process","text":"<p>In order to make a repository exempt from the archive process, a push or update must be made to the repository. We recommend doing this by creating/updating an exemption file in the repository. Each push to the repository will make the repository exempt from the archive process for a year (this value is configurable).</p>"},{"location":"technical_documentation/exemption_process/#exemption-file","title":"Exemption File","text":"<p>The name of the exemption file can be configured within <code>config.json</code>. For more information on the tool's configuration, refer to the Configuration Documentation.</p> <p>It is advised to the users within the notification issue that the file should be named according to the configured exemption file names and placed in the root of the repository. We also recommend that the file contains a comment indicating the reason for the exemption.</p> <p>The exemption file itself does not impact the tool's functionality in any way, but only acts as a clean way to push an update to the repository, which will reset the exemption timer.</p> <p>In the future, there might be some scope to report on the exemption files, such as listing repositories that have an exemption file, checking their age, or providing insights into why repositories are exempted. However, this is not currently implemented.</p>"},{"location":"technical_documentation/logging/","title":"Logging","text":"<p>When the tool gets deployed to AWS, a CloudWatch log group is created to capture all logs generated by the application. The logs contain which repositories are being processed, the status of each processing step, and any errors that occur.</p> <p>Once the tool has finished an execution, it will log:</p> <ul> <li>A list of repositories that have been archived.</li> <li>A list of repositories that have had issues created for them.</li> <li>The total number of repositories processed.</li> <li>The total number of repositories that were successfully archived.</li> <li>The total number of repositories that had issues created.</li> </ul> <p>Logs are kept for a period of 90 days by default. This is defined within the tool's Terraform variables (See <code>log_retention_days</code> within <code>terraform/service/variables.tf</code>).</p>"},{"location":"technical_documentation/notification_issue/","title":"Notification Issue","text":"<p>When a repository is eligible for archiving (i.e. it has not been updated in the last year), an issue is created in the repository to notify owners/maintainers. This issue serves as a reminder and provides information on how to archive the repository or make it exempt from the process if desired.</p> <p>All created issues are given an <code>Archive Notice</code> label to easily identify them.</p>"},{"location":"technical_documentation/notification_issue/#issue-contents","title":"Issue Contents","text":"<p>The notification issue contains the following information:</p> <ul> <li>How long the repository has until it will be archived.</li> <li>How to prevent the repository from being archived by creating or updating an exemption file.</li> <li>How the exemption file should be named and what it should contain.</li> <li>How users can manually archive the repository if they choose to do so.</li> </ul>"},{"location":"technical_documentation/notification_issue/#changing-the-notification-issue","title":"Changing the Notification Issue","text":"<p>To change the contents of the issue, code changes within <code>src/main.py</code> are required:</p> <ul> <li>Notification Issue Title: To change the title of the notification issue, modify the <code>notification_issue_title</code> variable in <code>src/main.py</code>.</li> <li>Notification Issue Body: To change the body of the notification issue, modify the <code>notification_issue_body_tuple</code> variable in <code>src/main.py</code>. This tuple gets joined into a single string with line breaks, so you can format it as needed.</li> </ul> <p>See an example snippet below:</p> <pre><code>notification_issue_title = \"Repository Archive Notice\"\n\nnotification_issue_body_tuple = (\n    \"## Important Notice \\n\\n\",\n    f\"This repository has not been updated in over {archive_threshold} days and will be archived in {notification_period} days if no action is taken. \\n\",\n    \"## Actions Required to Prevent Archive \\n\\n\",\n    \"1. Update the repository by creating/updating an exemption file. \\n\",\n    \"   - The exemption file should be named one of the following: \\n\",\n    f\"{''.join(formatted_filenames)}\\n\",\n    \"   - This file should contain the reason why the repository should not be archived. \\n\",\n    \"   - If the file already exists, please update it with the latest information. \\n\",\n    \"2. Close this issue. \\n\\n\",\n    f\"After these actions, the repository will be exempt from archive for another {archive_threshold} days. \\n\\n\",\n    \"## Manual Archive \\n\\n\",\n    \"If you wish to archive this repository manually, please ensure the following: \\n\",\n    \"1. A notice is added to the repository `README.md` file indicating that the repository is archived. \\n\",\n    \"2. All issues and pull requests are closed (Optional but strongly recommended). \\n\",\n    \"3. Repository Admins / CODEOWNERS are up to date before archiving. This will make it easier to unarchive the repository in the future if needed. \\n\\n\",\n    \"After these actions, you can archive the repository by going to the repository settings and selecting 'Archive this repository'. \\n\\n\",\n)\n</code></pre> <p>Please Note: The above code snippet is only an example and might not be the exact code in your <code>src/main.py</code>.</p>"},{"location":"technical_documentation/overview/","title":"Overview","text":""},{"location":"technical_documentation/overview/#scope","title":"Scope","text":"<p>The script focuses on repositories within the ONSdigital GitHub organisation - although configurable to work with any GitHub organisation. The tool is designed to run periodically and with minimal manual intervention.</p> <p>The script provides a range of benefits within the organisation, including:</p> <ul> <li>Less overhead: Reduces the number of repositories that need to be maintained.</li> <li>Improved discoverability: Makes it easier for users to find active projects.</li> <li>Organisational cleanliness: Helps keep the GitHub organisation tidy and organised.</li> <li>Improved security: Reduces the risk of security vulnerabilities in outdated repositories.</li> <li>Improved performance: Less active repositories makes it easier to collect repository information from the GitHub API.</li> </ul>"},{"location":"technical_documentation/overview/#architecture","title":"Architecture","text":"<p>The Archive Script is a single Python script which gets executed periodically within AWS Lambda. The script collects live organisation information from the GitHub API, checks each repository against a set of criteria, and archives/creates issues for repositories that meet the criteria.</p> <p>The below diagram illustrates the architecture of the Repository Archive Script:</p> <p></p>"},{"location":"technical_documentation/overview/#getting-started","title":"Getting Started","text":"<p>To get started with the Repository Archive Script, follow the steps within the project's README.</p>"},{"location":"technical_documentation/overview/#additional-information","title":"Additional Information","text":"<p>For more detailed information about the Repository Archive Script, refer to the following documents:</p> <ul> <li>The Process</li> <li>Exemption Process</li> <li>Configuration</li> <li>Notification Issue</li> <li>Logging</li> </ul>"},{"location":"technical_documentation/overview/#documentation","title":"Documentation","text":"<p>For information about this MkDocs site, refer to the Documentation page.</p>"},{"location":"technical_documentation/the_process/","title":"The Process","text":""},{"location":"technical_documentation/the_process/#steps-in-the-process","title":"Steps in the Process","text":""},{"location":"technical_documentation/the_process/#1-data-collection","title":"1. Data Collection","text":"<p>Using the GitHub API, collect all non-archived repositories for a given organisation (ONSdigital).</p> <p>This includes the repository's name, when it was last updated and the number of open issues with the notification issue label (defined within the configuration - see Configuration).</p>"},{"location":"technical_documentation/the_process/#2-data-processing","title":"2. Data Processing","text":"<p>Iterate through each repository and check the following:</p>"},{"location":"technical_documentation/the_process/#a-last-updated","title":"a. Last Updated","text":"<p>Has the repository been updated in the last year? If not, it is considered inactive and is eligible for archiving.</p> <p>(The time period can be configured in the Configuration file.)</p> <p>Checking for updates allows the exemption mechanism to work. If an exemption file gets added or updated within the repository, it will have been updated and considered active.</p>"},{"location":"technical_documentation/the_process/#b-open-issues","title":"b. Open Issues","text":"<p>If the repository is eligible for archiving, check if there is an open issue with the notification label.</p> <p>If there is no such issue, create one to notify the team that the repository is being archived.</p>"},{"location":"technical_documentation/the_process/#c-archive-repository","title":"c. Archive Repository","text":"<p>If there is an open issue with the notification label, check how long the issue has been open.</p> <p>If the issue has been open for more than 30 days (configurable in the Configuration file), archive the repository.</p>"},{"location":"technical_documentation/the_process/#process-flow-chart","title":"Process Flow Chart","text":""}]}